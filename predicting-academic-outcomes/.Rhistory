color = "black",
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(Target)) + geom_bar(width=0.2,
color = "black",
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(Target)) + geom_bar(width=0.8,
color = "black",
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(Target)) + geom_bar(width=0.8,
color = "Target",
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(Target)) + geom_bar(width=0.8,
color = "Target",
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(Target)) + geom_bar(width=0.8,
color = "Target",
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(Target)) + geom_bar(width=0.8,
fill = 'lightgreen') + theme_bw()
ggplot(train, aes(y = Target)) + geom_bar(width=0.8,
fill = y) + theme_bw()
ggplot(train, aes(y = Target, fill = Target)) +
geom_bar(width = 0.8) +
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8) +
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label=Target), vjust=1.6, color="white", size = 3.6)
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label=..count..), vjust=1.6, color="white", size = 3.6)
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(stat='count', aes(label=..count..), vjust=1.6, color="white", size=3.6) +
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label=Target), vjust=1.6, color="white", size = 3.6)
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(y=count, vjust=1.6, color="white", size = 3.6)
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(y=count, label = count, vjust=1.6, color="white", size = 3.6)
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label = ..count..), stat = "count",vjust=1.6, color="white", size = 3.6)
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label = ..count..), stat = "count",vjust=1.6, color="white", size = 3.6)
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label = ..count..), stat = "count",vjust=1.5, color="white", size = 3.6)
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label = ..count..), stat = "count",vjust=1.5, color="white", size = 3.6)
theme_bw()
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label = ..count..), stat = "count",vjust=1.5,
color="white", size = 3.6) + labs(title = "Count of Academic Outcomes") +
theme_bw()
pairs(train)
str(train)
corrplot(cor(train))
library(corrplot)
corrplot(cor(train))
train = as.factor(Target)
library(corrplot)
train$Target = as.factor(Target)
library(corrplot)
train$Target = as.factor(train$Target)
corrplot(cor(train))
str(train)
one.way <- aov(Target ~., data = train)
ggboxplot(train, x=Course, y = Target)
geom_boxplot(train, x=Course, y = Target)
ggplot(train, aes(x=Course, y=Target)) +
geom_boxplot(notch=TRUE)
ggplot(train, aes(x = Course, y = Target)) +
geom_boxplot(notch = TRUE) +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
ggplot(train, aes(x = Course, y = Target)) +
geom_boxplot(notch = TRUE) +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
library(ggplot2)
library(ggplot2)
ggplot(train, aes(x = Course, y = Target)) +
geom_boxplot(notch = TRUE) +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
library(ggplot2)
ggplot(train, aes(x = Course, y = Target)) +
geom_boxplot() +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
library(ggplot2)
ggplot(train, aes(x = Course, y = Target)) +
geom_boxplot() +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
ggplot(train, aes(x = Target, y = Course)) +
geom_boxplot() +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
library(ggplot2)
ggplot(train, aes(x = Course, y = Target, fill = Target)) +
geom_boxplot() +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
par(mfrow = c(7,5))
loop.vector < 2:35
loop.vector <- 2:35
par(mfrow = c(7,5))
loop.vector <- 2:35
for (i in loop.vector ) {
x <- train[,i]
ggplot(train,(aes(x = i , y = Target, fill = Target)) +
geom_boxplot()+ theme_bw())
}
par(mfrow = c(7,5))
loop.vector <- 2:35
for (i in loop.vector ) {
x <- train[,i]
ggplot(train,(aes(x = i , y = Target, fill = Target)) +
geom_boxplot()+ theme_bw())
}
x <- train[,i]
par(mfrow = c(7,5))
loop.vector <- 2:35
for (i in loop.vector ) {
x <- train[,i]
ggplot(train,(aes(x = i , y = Target, fill = Target)) +
geom_boxplot()+ theme_bw())
}
par(mfrow = c(7,5))
loop.vector <- 2:35
for (i in loop.vector ) {
x <- train[,i]
ggplot(train,(aes(x = x , y = Target, fill = Target)) +
geom_boxplot()+ theme_bw())
}
library(ggplot2)
library(gridExtra)
# Create a list to store the ggplot objects
plot_list <- list()
# Loop to create each ggplot and store it in the list
loop.vector <- 2:35
for (i in loop.vector) {
x <- train[, i]
p <- ggplot(train, aes(x = as.factor(x), y = Target, fill = Target)) +
geom_boxplot() +
theme_bw() +
labs(x = colnames(train)[i])
plot_list[[i - 1]] <- p
}
# Arrange the plots in a grid
do.call("grid.arrange", c(plot_list, ncol = 5))
geom_boxplot()+ theme_bw())
# Arrange the plots in a grid
do.call("grid.arrange", c(plot_list, ncol = 5))
geom_boxplot()+ theme_bw()
library(ggplot2)
library(gridExtra)
plot_list <- list()
loop.vector <- 2:35
for (i in loop.vector) {
x <- train[, i]
p <- ggplot(train, aes(x = as.factor(x), y = Target, fill = Target)) +
geom_boxplot() +
theme_bw() +
labs(x = colnames(train)[i])
plot_list[[i - 1]] <- p
}
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
options(repr.plot.width=12, repr.plot.height=10)
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
options(repr.plot.width=20, repr.plot.height=10)
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
options(repr.plot.width=50, repr.plot.height=50)
My_theme <- theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold"),
strip.text = element_text(size = 11, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
options(repr.plot.width=50, repr.plot.height=50)
My_theme <- theme(
axis.text = element_text(size = 5, colour = "black"),
axis.title = element_text(size = 5, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 5, face = "bold"),
strip.text = element_text(size = 5, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
# Identify outliers using IQR method for a specific column
Q1 <- quantile(train$Course, 0.25)
Q3 <- quantile(train$Course, 0.75)
IQR <- Q3 - Q1
# Define outliers
outliers <- train[train$Course < (Q1 - 1.5 * IQR) | train$Course > (Q3 + 1.5 * IQR), ]
# View the outliers
print(outliers)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
summary(one.way)
View(one.way)
one.way <- aov(Target ~., data = train)
summary(one.way)
one.way <- aov(Target ~., data = train)
summary(one.way)
str(train)
# Check for missing values
sum(is.na(train))  # Total number of missing values
# Optionally, remove rows with missing values
train <- na.omit(train)
library(tidyverse)
library(caret)
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test.csv", header= TRUE)
class_train <- pc_scores
ggplot(train, aes(Target, fill = Target)) +
geom_bar(width = 0.8, color="black") +
geom_text(aes(label = ..count..), stat = "count",vjust=1.5,
color="white", size = 3.6) + labs(title = "Count of Academic Outcomes") +
theme_bw()
library(ggplot2)
ggplot(train, aes(x = Course, y = Target, fill = Target)) +
geom_boxplot() +
theme_bw() +
labs(title = "Boxplot of Target by Course", x = "Course", y = "Target")
options(repr.plot.width=50, repr.plot.height=50)
My_theme <- theme(
axis.text = element_text(size = 5, colour = "black"),
axis.title = element_text(size = 5, colour = "black"),
axis.line = element_line(colour = "black"),
plot.title = element_text(size = 5, face = "bold"),
strip.text = element_text(size = 5, colour = "black"),
strip.background = element_rect(fill = "#E0EEE0"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
train %>%
select(!Target) %>%
pivot_longer(-id, names_to = "var", values_to = "value") %>%
ggplot(aes(x = "", y = value)) +
geom_boxplot(fill = "#8968CD", outlier.colour = "#FFA07A") +
labs(title = "Features distributions",
y = "Value",
x = "") +
facet_wrap((~ var), scales = "free") +
My_theme
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
View(train)
train[is.na(train) | train=="Inf"] = NA
View(train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
one.way <- aov(Target ~., data = train)
View(train)
# Check for NA values in the Target variable
sum(is.na(train$Target))
# Check for NaN values in the Target variable
sum(is.nan(train$Target))
# Check for Inf values in the Target variable
sum(is.infinite(train$Target))
str(train)
train$Target = as.factor(train$Target)
one.way <- aov(Target ~., data = train)
summary(one.way)
train$Target = as.factor(train$Target)
one.way <- aov(Target ~., data = train)
summary(one.way)
set.seed(1000)
training.samples <- class_train$Target %>% createDataPartition(p = 0.7, list = F)
train.data <- class_train[training.samples, ]
one.way
train$Target = as.factor(train$Target)
one.way <- aov(Target ~., data = train)
one.way
train$Target = as.factor(train$Target)
one.way <- aov(Target ~., data = train)
one.way
train$Target = as.factor(train$Target)
one.way <- aov(Target ~., data = train)
one.way
install.packages("fastDummies")
library(fastDummies)
dummy_cols(train, select_columns = c("Target"))
library(fastDummies)
train_new = dummy_cols(train, select_columns = c("Target"),
remove_selected_columns = TRUE)
View(train_new)
one.way <- aov(Target ~., data = train)
one.way
one.way <- aov(Target ~., data = train_new)
View(train_new)
one.way <- aov(Target_Dropout ~., data = train_new)
one.way
summary(one.way)
str(train_new)
oneway_dropout <- aov(Target_Dropout ~., data = train_new)
oneway_enrolled <- aov(Target_Enrolled ~., data = train_new)
oneway_graduated <- aov(Target_Enrolled~., data = train_new)
summary(oneway_dropout)
set.seed(1000)
training.samples <- class_train$Target %>% createDataPartition(p = 0.7, list = F)
